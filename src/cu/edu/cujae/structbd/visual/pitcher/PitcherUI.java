/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cu.edu.cujae.structbd.visual.pitcher;

import cu.edu.cujae.structbd.dto.pitcher.DeletePitcherDTO;
import cu.edu.cujae.structbd.dto.pitcher.ReadPitcherDTO;
import cu.edu.cujae.structbd.services.ServicesLocator;
import cu.edu.cujae.structbd.utils.AppCustomWindow;
import cu.edu.cujae.structbd.utils.UtilsConnector;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.LinkedList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hector Angel Gomez
 */
public class PitcherUI extends AppCustomWindow {

    private LinkedList<ReadPitcherDTO> readPitcherDTO_list;
    
    public void start(){
        initComponents();
        UtilsConnector.viewUtils.disableButtonsByUser(insertButton, editButton, deleteButton);
        this.updateUI();
    }
    
    public void updateUI(){
        try{
            this.jTable1.setComponentPopupMenu(jPopupMenu1);
            UtilsConnector.viewUtils.cleanTable(jTable1);
            
            this.readPitcherDTO_list = new LinkedList<>(ServicesLocator.PitcherServices.readAllPitchers());
            Iterator<ReadPitcherDTO> it = readPitcherDTO_list.iterator();
            while(it.hasNext()){
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                
                ReadPitcherDTO readPitcherDTO = it.next();
                model.addRow(new Object[]
                {
                    readPitcherDTO.getTeamMemberName(), readPitcherDTO.getMemberNumber(), 
                    readPitcherDTO.getYearsInTeam(), readPitcherDTO.getTeam(), 
                    readPitcherDTO.getInningsPitched(), readPitcherDTO.getRunsAllowed(),
                    readPitcherDTO.getPCL()
                });
            }
        }
        catch (SQLException | ClassNotFoundException ex)
        {
            UtilsConnector.viewMessagesUtils.showConecctionErrorMessage(this, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        deleteButton = new javax.swing.JMenuItem();
        editButton = new javax.swing.JMenuItem();
        jButtonClose = new javax.swing.JButton();
        insertButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        deleteButton.setText("Eliminar");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPopupMenu1.add(deleteButton);

        editButton.setText("Editar");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        jPopupMenu1.add(editButton);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lanzadores");
        setMinimumSize(new java.awt.Dimension(780, 440));

        jButtonClose.setText("Cerrar");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        insertButton.setText("Insertar");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Dorsal", "AÃ±os en equipo", "Equipo", "Entradas Lanzadas", "Carreras permitidas", "PCL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 761, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(insertButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonClose, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(insertButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        // TODO add your handling code here:
        UtilsConnector.viewUtils.openDialog(this, new CreatePitcherUI(this,true));
    }//GEN-LAST:event_insertButtonActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
      int selectRow =this.jTable1.getSelectedRow();
      
      if(selectRow >= 0){
          boolean accept = UtilsConnector.viewMessagesUtils.showConfirmDialog(this, "Seguro que quiere eliminar este pitcher");
          
          if(accept){
              try {
                  ReadPitcherDTO p = this.readPitcherDTO_list.get(selectRow);
                  ServicesLocator.PitcherServices.deletePitcher(new DeletePitcherDTO(p.getTeamMemberID()));
                  UtilsConnector.viewMessagesUtils.showSuccessMessage(this, "Pitcher eliminado satisfactoriamente.");
                  this.updateUI();
              } catch (SQLException | ClassNotFoundException ex) {
                  UtilsConnector.viewMessagesUtils.showConecctionErrorMessage(this, ex);
              } 
          }
      }
         // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selectRow = this.jTable1.getSelectedRow();
        
        if(selectRow >= 0){
            ReadPitcherDTO sp = this.readPitcherDTO_list.get(selectRow);
            UtilsConnector.viewUtils.openDialog(this, new UpdatePitcherUI(this, true, sp));
        }
                // TODO add your handling code here:
    }//GEN-LAST:event_editButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem deleteButton;
    private javax.swing.JMenuItem editButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public LinkedList<ReadPitcherDTO> getPitchers() {
        return this.readPitcherDTO_list;
    }

}
