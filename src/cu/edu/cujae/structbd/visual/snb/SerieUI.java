/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cu.edu.cujae.structbd.visual.snb;

import cu.edu.cujae.structbd.dto.game.ReadGameDTO;
import cu.edu.cujae.structbd.dto.phase.ReadAPhaseDTO;
import cu.edu.cujae.structbd.dto.phase.ReadPhaseDTO;
import cu.edu.cujae.structbd.dto.reports.ReadReport_1DTO;
import cu.edu.cujae.structbd.dto.snb.TeamPositionDTO;
import cu.edu.cujae.structbd.services.ServicesLocator;
import cu.edu.cujae.structbd.visual.game.CreateGameUI;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jose
 */
public class SerieUI extends javax.swing.JFrame
{

    private LinkedList<ReadPhaseDTO> phases_list;
    public SerieUI()
    {
        initComponents();
        try
        {
            this.phases_list = new LinkedList<>(ServicesLocator.PhaseServices.readActivePhase());
            for (ReadPhaseDTO rp : phases_list)
            {
                combo_phases.addItem(rp.getPhase_name());
            }
        }
        catch (SQLException ex)
        {
            Logger.getLogger(SerieUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(SerieUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuMod = new javax.swing.JMenuItem();
        jMenuDel = new javax.swing.JMenuItem();
        combo_phases = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        close_button = new javax.swing.JButton();
        insert_button = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableGames = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePosition = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();

        jMenuMod.setText("Modificar juego");
        jPopupMenu1.add(jMenuMod);

        jMenuDel.setText("Eliminar juego");
        jPopupMenu1.add(jMenuDel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Serie Nacional de Béisbol");

        combo_phases.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Seleccione>" }));
        combo_phases.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                combo_phasesActionPerformed(evt);
            }
        });

        jLabel1.setText("Fase:");

        close_button.setText("Cerrar fase");
        close_button.setEnabled(false);
        close_button.setMaximumSize(new java.awt.Dimension(100, 22));
        close_button.setMinimumSize(new java.awt.Dimension(100, 22));
        close_button.setPreferredSize(new java.awt.Dimension(100, 22));
        close_button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                close_buttonActionPerformed(evt);
            }
        });

        insert_button.setText("Insertar juego");
        insert_button.setEnabled(false);
        insert_button.setMaximumSize(new java.awt.Dimension(120, 22));
        insert_button.setMinimumSize(new java.awt.Dimension(120, 22));
        insert_button.setPreferredSize(new java.awt.Dimension(120, 22));
        insert_button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                insert_buttonActionPerformed(evt);
            }
        });

        jTableGames.setAutoCreateRowSorter(true);
        jTableGames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Fecha", "Equipo Local", "C", "C", "Equipo Visitante", "Ganador", "Audiencia"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jTableGames.setComponentPopupMenu(jPopupMenu1);
        jScrollPane2.setViewportView(jTableGames);
        if (jTableGames.getColumnModel().getColumnCount() > 0)
        {
            jTableGames.getColumnModel().getColumn(1).setPreferredWidth(180);
            jTableGames.getColumnModel().getColumn(2).setPreferredWidth(30);
            jTableGames.getColumnModel().getColumn(3).setPreferredWidth(30);
            jTableGames.getColumnModel().getColumn(4).setPreferredWidth(180);
            jTableGames.getColumnModel().getColumn(5).setPreferredWidth(180);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Juegos", jPanel1);

        jTablePosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Posición", "Equipo", "JJ", "JG", "JP", "Puntos"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTablePosition);
        if (jTablePosition.getColumnModel().getColumnCount() > 0)
        {
            jTablePosition.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTablePosition.getColumnModel().getColumn(1).setPreferredWidth(120);
            jTablePosition.getColumnModel().getColumn(2).setPreferredWidth(30);
            jTablePosition.getColumnModel().getColumn(3).setPreferredWidth(30);
            jTablePosition.getColumnModel().getColumn(4).setPreferredWidth(30);
            jTablePosition.getColumnModel().getColumn(5).setPreferredWidth(30);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tabla de posiciones", jPanel2);

        jButton4.setText("Cerrar");
        jButton4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_phases, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(insert_button, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(close_button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insert_button, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_phases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(close_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Juegos");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void combo_phasesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_combo_phasesActionPerformed
    {//GEN-HEADEREND:event_combo_phasesActionPerformed
        this.update_tables();
    }//GEN-LAST:event_combo_phasesActionPerformed

    public void update_tables(){
        if (combo_phases.getSelectedIndex() != 0)
        {
                try {
            DefaultTableModel model = (DefaultTableModel) this.jTableGames.getModel();
            int count = model.getRowCount();
            for(int i = 0; i < count; i++){
                model.removeRow(0);
            }
            DefaultTableModel model_1 = (DefaultTableModel) this.jTablePosition.getModel();
            int count_1 = model_1.getRowCount();
            for(int i = 0; i < count_1; i++){
            model_1.removeRow(0);
                    }
                    //Obteniendo los datos de la fase seleccionada
                    int phase_id = -1;
                    boolean found = false;
                    Iterator<ReadPhaseDTO> it_list = this.phases_list.iterator();
                    while (it_list.hasNext() && !found)
                    {
                        ReadPhaseDTO rf = it_list.next();
                        if (rf.getPhase_name().equalsIgnoreCase(combo_phases.getSelectedItem().toString()))
                        {
                            phase_id = rf.getPhase_id();
                            found = true;
                            //Si la fase está se puede insertar juego y cerrar la fase, se habilitan los botones
                            if (!rf.getIs_active()){
                                close_button.setEnabled(false);
                                insert_button.setEnabled(false);
                            }else{
                                close_button.setEnabled(true);
                                insert_button.setEnabled(true);
                            }
                        }
                    }
                    //Buscando y mostrando los juegos de la fase seleccionada
                    LinkedList<ReadGameDTO> games_list = new LinkedList<>(ServicesLocator.GameServices.
                        readAllGamesByPhase(
                            new ReadAPhaseDTO(phase_id)));
                    jTableGames.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                    for (ReadGameDTO readGameDTO : games_list)
                    {
                        ((DefaultTableModel) jTableGames.getModel()).addRow(new Object[]
                        {
                            readGameDTO.getDate().toString(), readGameDTO.getHcTeamName(), readGameDTO.
                            getRuns_home_club(),
                            readGameDTO.getRuns_visitant(),
                            readGameDTO.getVisTeamName(),
                            readGameDTO.getWinner(), readGameDTO.getAudience()
                        });
                    }
                    //Mostrando la tabla de posiciones de la fase seleccionada
                    ReadAPhaseDTO readAPhaseDTO = new ReadAPhaseDTO(phase_id);
                    LinkedList<TeamPositionDTO> position_table = new LinkedList<>(ServicesLocator.AppServices.
                        getPositionsTablebyPhase(readAPhaseDTO));
                    int position = 1;
                    jTablePosition.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                    for (TeamPositionDTO teamPositionDTO : position_table){
                        ((DefaultTableModel) jTablePosition.getModel()).addRow(new Object[]{
                            Integer.valueOf(position), teamPositionDTO.getTeam_name().toString(), teamPositionDTO.
                            getPlayed_games(), teamPositionDTO.getWon_playes(), teamPositionDTO.getLost_playes(),
                            teamPositionDTO.getPoints()
                        });
                        position++;
                    }
                    
                }
                catch (SQLException ex)
                {
                    Logger.getLogger(SerieUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (ClassNotFoundException ex)
                {
                    Logger.getLogger(SerieUI.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        else
        {
            DefaultTableModel model = (DefaultTableModel) this.jTableGames.getModel();
            int count = model.getRowCount();
            for (int i = 0; i < count; i++)
            {
                model.removeRow(0);
            }
            DefaultTableModel model_1 = (DefaultTableModel) this.jTablePosition.getModel();
            int count_1 = model_1.getRowCount();
            for (int i = 0; i < count_1; i++)
            {
                model_1.removeRow(0);
            }
        }
    }
    private void close_buttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_close_buttonActionPerformed
    {//GEN-HEADEREND:event_close_buttonActionPerformed
        int phase_id = -1;
        boolean found = false;
        Iterator<ReadPhaseDTO> it_list = this.phases_list.iterator();
        while (it_list.hasNext() && !found)
        {
            ReadPhaseDTO rf = it_list.next();
            if (rf.getPhase_name().equalsIgnoreCase(combo_phases.getSelectedItem().toString()))
            {
                try {
                    phase_id = rf.getPhase_id();
                    found = true;
                    ServicesLocator.PhaseServices.closePhase(phase_id);
                    if (phase_id == 4){
                        ReadReport_1DTO winner = ServicesLocator.AppServices.getWinner();
                        JOptionPane.showMessageDialog(rootPane,
                                                      "Finaliza la Serie Nacional de Béisbol, equipo ganador: " + winner,
                                                      "Final", JOptionPane.INFORMATION_MESSAGE);
                    }
                    else
                    {
                        ClassifiedUI c = new ClassifiedUI(this, true, new ReadAPhaseDTO(phase_id));
                    }

                }
                catch (SQLException ex)
                {
                    Logger.getLogger(SerieUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (ClassNotFoundException ex)
                {
                    Logger.getLogger(SerieUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_close_buttonActionPerformed

    private void insert_buttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_insert_buttonActionPerformed
    {//GEN-HEADEREND:event_insert_buttonActionPerformed
        try
        {
            String phase_name = combo_phases.getSelectedItem().toString();
            LinkedList<ReadPhaseDTO> lis_readPhaseDTO = new LinkedList<>(ServicesLocator.PhaseServices.readAllPhase());
            Iterator<ReadPhaseDTO> list_it = lis_readPhaseDTO.iterator();
            boolean found = false;
            int phase_id = -1;
            while (list_it.hasNext() && !found)
            {
                ReadPhaseDTO readPhaseDTO = list_it.next();
                if (readPhaseDTO.getPhase_name().equalsIgnoreCase(phase_name))
                {
                    found = true;
                    phase_id = readPhaseDTO.getPhase_id();
                }
            }
            CreateGameUI createGameUI = new CreateGameUI(this, rootPaneCheckingEnabled, new ReadAPhaseDTO(phase_id));
            createGameUI.setVisible(true);
        }
        catch (SQLException ex)
        {
            Logger.getLogger(SerieUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(SerieUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_insert_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(SerieUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(SerieUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(SerieUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(SerieUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new SerieUI().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close_button;
    private javax.swing.JComboBox<String> combo_phases;
    private javax.swing.JButton insert_button;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuDel;
    private javax.swing.JMenuItem jMenuMod;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableGames;
    private javax.swing.JTable jTablePosition;
    // End of variables declaration//GEN-END:variables
}
